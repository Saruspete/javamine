#!/bin/bash
#
# Javamine  Start/Stop
#
# chkconfig: 3 80 20
# description: OOM-Score adjuster for heavy apps
# 
# processname: oom_manager.sh
# Config file: /etc/sysconfig/javamine
#
# By: Adrien Mahieux - adrien.mahieux@gmail.com
#
#


# Source function library.
. /etc/init.d/functions

# If the configuration file exists, load it
[ -e /etc/sysconfig/javamine ] && {
	. /etc/sysconfig/javamine
}

RETVAL=0

# PATH_BASE is overridable
PATH_BASE_DEFAULT="/usr/local"
PATH_BASE="${PATH_BASE:-$PATH_BASE_DEFAULT}"

PATH_PID="${PATH_BASE}/var/run/oom_manager.pid"
PATH_LOGS="${PATH_BASE}/var/log/oom_manager.log"

EXEC_NAME="OOM Score Manager"
EXEC_PATH="${PATH_BASE}/sbin/oom_manager.sh"
EXEC_SNAME="${EXEC_PATH##$(dirname $EXEC_PATH)/}"

# EXEC_ARGS is overridable
EXEC_ARGS_DEFAULT=" -p ${PATH_BASE}/etc/oom_manager/profiles.d -l $PATH_LOGS"
# Use the overriden EXEC_ARGS if available
EXEC_ARGS="${EXEC_ARGS:-$EXEC_ARGS_DEFAULT}"
# And add it the added args
EXEC_ARGS="$EXEC_ARGS $EXEC_ARGS_ADD"


_proc_ispidrunning () {
	
	PID=$1

	# PID Validity
	[ -n "$PID" ] && [ "$PID" -gt "1" -a "$PID" -lt "65535" ] || {
		return 1
	}

	# Process still running
	[ -e "/proc/$PID/cmdline" ] || {
		return 1
	}

	# Process is our daemon
#	grep -Eao '^[/a-zA-Z0-9_\-\s]+' /proc/$PID/cmdline | grep -i "$EXEC_NAME" > /dev/null || {
	grep "$EXEC_SNAME" /proc/$PID/cmdline >/dev/null || {
		return 1
	}

	# All tests passed. We're still here !
	return 0
}

_proc_isrunning () {

	PR="$1"
	P="${PR##$(dirname $PR)/}"
	ps --no-headers -C "$P" -o pid | tr '\n' ' '

}


_proc_run () {
	
	# Daemonise parameter is mandatory !
	$EXEC_PATH -d $EXEC_ARGS &
	PID=$!
	
	sleep 1
	
	# If process is not running, consider it as failed
	_proc_ispidrunning $PID || return 1
	
	# Store the new PID
	_proc_setpid $PID


	return 0

}

_proc_setpid () {
	PID=$1
	echo "$PID"> $PATH_PID
}

_proc_getpid () {
	[ -e "$PATH_PID" ] && {
		cat $PATH_PID
	}
}


_install_createdir () {

	DIR="$1"

	[ -x "$DIR" ] || {
		mkdir -p "$DIR" || return 1
	}
	

}

start () {
	
	echo -n "Starting $EXEC_NAME ... "

	# Test executable
	[ -x "$EXEC_PATH" ] || {
		echo -n "$EXEC_PATH not executable"
		echo_failure
		echo
		return 1
	}
	
	PID="$(_proc_getpid)"
	# Test if process is already running
	_proc_ispidrunning $PID  && {
		echo -n "Process $PID already running"
		echo_failure
		echo
		return 1
	}
	
	# Try to start
	_proc_run || {
		echo_failure
		echo
		return 1
	}
	
	echo_success
	echo
	return 0
}

stop () {
	
	echo -n "Stopping $EXEC_NAME ... "

	# Test if process is still running
	OPID="$(_proc_getpid)"
	[ -z "$OPID" ] && {
		echo -n "No running manager defined"
		echo_failure
		echo
		return 1
	}

	_proc_ispidrunning $OPID || {
		echo -n "Process $OPID not running"
		echo_warning
		echo
		return 0
	}
	
	kill $OPID || {
		echo -n "Unable to kill PID $OPID"
		echo_failure
		echo
		return 1
	}
	
	# Remove old pid
	_proc_setpid

	echo_success
	echo
	return 0
}

restart () {
	stop
	start
}


status () {
	PID="$(_proc_getpid)"
	RPID=$(_proc_isrunning $EXEC_PATH)
	
	
	# PID defined
	[ -n "$PID" ] && {
		echo -n "Process $PID is "
	
		# running (and should)
		_proc_ispidrunning $PID && {
			echo -n "running "
			echo_success
			echo
			return 0
		
		# Not running (but should)
		} || {
			echo -n "not running"
			echo_failure
			echo
			return 1
		}
	} || {
	# No PID defined
		echo -n "No Process defined "
		
		# running (but shouldn't)
		[ -n "$RPID" ] && {
			echo -n "but process $RPID running !"
			echo_warning
			echo
			return 1
		
		# not running (and shouldn't)
		} || {
			echo -n "and no process running"
			echo_success
			echo
			return 0
		}
	}
}

zap () {
	_proc_setpid
}

install () {

	TMP_PATH_PID="$(dirname $PATH_PID)"
	TMP_PATH_LOGS="$(dirname $PATH_LOGS)"
	_install_createdir $PATH_BASE || { echo "Unable to create $PATH_BASE" ; return 1; }
	_install_createdir $TMP_PATH_PID  || { echo "Unable to create $TMP_PATH_PID" ;  return 1; }
	_install_createdir $TMP_PATH_LOGS || { echo "Unable to create $TMP_PATH_LOGS" ; return 1; }  
	
	# Folders are available
	return 0
}

reset () {
	
	typeset -i NBRST=0
	for ADJFILE in /proc/*/oom_adj; do
		grep -v 0 $ADJFILE > /dev/null && {
			echo "0" > $ADJFILE 
			NBRST=NBRST+1
		}
	done
	
	echo -n $NBRST Processes oom_adj reset to 0 
	echo_success
	echo

	return 0
}

case "$1" in 
  start)  
        start
        ;;
  stop)
        stop
        ;;
  restart)
  		restart
        ;;
  zap)
  		zap
		;;
  status) 
        status
        ;;
  reset)
  		reset
		;;
  install)
  		install
		;;

  *)
        echo $"Usage: $0 {start|stop|zap|status|restart|reset|install}"
        exit 1
		;;
esac

